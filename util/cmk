#!/usr/bin/env python3

# cmk cmake clobber debug python sanitize -examples -utils -testing 

import sys
import os
import glob

CMAKE_VERSION = "3.11.4"
CMAKE_VERSION = "3.10.3"

cmake_bin = "/home/cary/src/cmake/%s/bin/cmake" % CMAKE_VERSION
cmake_bin = "/usr/bin/cmake"

lucas_ilm = "/lucas/ilm"
ilm_prefix = "/dept/rnd/home/cary/"
ilm_prefix = "/dept/rnd/home/cary/"
ilm_build = "/dept/rnd/builds/cary"

home_prefix = "/home/cary/"
home_build = "/home/cary/builds"

users_prefix = "/Users/cary/"
users_build = "/Users/cary/builds"

PYTHON = 0
USE_PYTHON2 = 0
BUILD_TESTING = 1
BUILD_SHARED_LIBS=1
OPENEXR_BUILD_UTILS=1
OPENEXR_INSTALL_EXAMPLES=1
OPENEXR_RUN_FUZZ_TESTS = 0
CMAKE_VERBOSE_MAKEFILE = 1
CMAKE_BUILD_TYPE = "Release"

CMAKE_CXX_COMPILER = "g++"
CMAKE_CXX_FLAGS = "-g"
CMAKE_CXX_STANDARD = 14
CMAKE_CXX_OUTPUT_EXTENSION_REPLACE = 0
CMAKE_EXE_LINKER_FLAGS = ""
CMAKE_C_COMPILER = "gcc"
CMAKE_C_FLAGS = ""


def branch():
    on_branch = "On branch "
    head_detached_at = "HEAD detached at "
    f = os.popen ("git status")
    lines = f.readlines()
    if len(lines) == 0:
        return ""
    b = lines[0][:-1]
    if b.startswith (on_branch):
        b = b[len (on_branch):]
    elif b.startswith (head_detached_at):
        b = b[len (head_detached_at):]
    else:
        b = ""
    return "/" + b

def coverage():

    files = glob.glob ("**/*.cpp", recursive=True)
    for file in files:
        print("file=%s" % file)
        
#for g in $(find ../_build -name "*.gcno" -type f); do
#    gcov -l -p -o $(dirname "$g") $(echo "$g" | sed -e 's/\/_build\//\//' -e 's/\.gcno/\.cpp/' -e 's/\/CMakeFiles.*\.dir\//\//')
#done
    

args = []
cmd = None

for arg in sys.argv[1:]:
    if arg == "build":
        cmd = arg
    elif arg == "cmake":
        cmd = arg
    elif arg == "clobber":
        cmd = arg
    elif arg == "debug":
        CMAKE_BUILD_TYPE = "Debug"
    elif arg == "release":
        CMAKE_BUILD_TYPE = "Release"
    elif arg == "python":
        PYTHON = 1
    elif arg == "python2":
        PYTHON = 1
        USE_PYTHON2 = 1
    elif arg == "sanitize":
        sanitize = "address"
        sanitize = "undefined"
        sanitize = "undefined,address"
        CMAKE_CXX_FLAGS += " -fsanitize=%s " % sanitize
        CMAKE_C_FLAGS += " -fsanitize=%s " % sanitize
    elif arg == "-shared" or arg == "static":
        BUILD_SHARED_LIBS = 0
    elif arg == "-examples":
        OPENEXR_INSTALL_EXAMPLES = 0
    elif arg == "-utils":
        OPENEXR_BUILD_UTILS = 0
    elif arg == "-testing":
        BUILD_TESTING = 0
    elif arg == "11":
        CMAKE_CXX_STANDARD = 11
    elif arg == "clang":
        CMAKE_CXX_COMPILER = "clang++"
        CMAKE_C_COMPILER = "clang"
    elif arg == "gcov":
        CMAKE_CXX_FLAGS += "-g -O0 -fprofile-arcs -ftest-coverage"
        CMAKE_CXX_OUTPUT_EXTENSION_REPLACE = 1
        CMAKE_EXE_LINKER_FLAGS = "-lgcov"
    elif arg == "coverage":
        cmd = arg
    else:
        args.append (arg)
        
SRC_DIR = os.getcwd()

if SRC_DIR.startswith (lucas_ilm):

    SRC_DIR = SRC_DIR[len(lucas_ilm):]

if SRC_DIR.startswith (ilm_prefix):

    project = SRC_DIR[len(ilm_prefix):]
    build = "%s/%s%s" % (ilm_build, project, branch())
    if BUILD_SHARED_LIBS == 0:
        build += "-static"
    if not os.path.exists (build):
        os.makedirs (build)

    CMAKE_CXX_COMPILER = "/opt/rh/devtoolset-6/root/bin/g++"
    CMAKE_C_COMPILER = "/opt/rh/devtoolset-6/root/bin/gcc"

elif SRC_DIR.startswith (home_prefix):

    project = SRC_DIR[len(home_prefix):]
    build = "%s/%s%s-%s" % (home_build, project, branch(), CMAKE_BUILD_TYPE)
    if BUILD_SHARED_LIBS == 0:
        build += "-static"
    if not os.path.exists (build):
        os.makedirs (build)

elif SRC_DIR.startswith (users_prefix):

    project = SRC_DIR[len(users_prefix):]
    build = "%s/%s%s-%s" % (users_build, project, branch(), CMAKE_BUILD_TYPE)
    if BUILD_SHARED_LIBS == 0:
        build += "-static"
    if not os.path.exists (build):
        os.makedirs (build)

    cmake_bin = "cmake"
    CMAKE_CXX_COMPILER = "g++"
    CMAKE_C_COMPILER = "gcc"

else:

    print("where are you?")

print(build)
os.chdir (build)

if len (sys.argv) == 1:
    exit(0)
    
if cmd == "cmake":

    args = " ".join (args)
    cmd = "%s %s %s" % (cmake_bin, SRC_DIR, args)
    cmd += " -DCMAKE_BUILD_TYPE=%s" % CMAKE_BUILD_TYPE
    cmd += " -DCMAKE_INSTALL_PREFIX=%s/install" % build
    cmd += " -DBUILD_SHARED_LIBS=%s" % BUILD_SHARED_LIBS
    cmd += " -DCMAKE_VERBOSE_MAKEFILE=%s" % CMAKE_VERBOSE_MAKEFILE
    cmd += " -DCMAKE_CXX_STANDARD=%s " % CMAKE_CXX_STANDARD
    cmd += " -DCMAKE_CXX_COMPILER=%s " % CMAKE_CXX_COMPILER
    cmd += " -DCMAKE_CXX_FLAGS=\"%s\"" % CMAKE_CXX_FLAGS
    cmd += " -DCMAKE_CXX_OUTPUT_EXTENSION_REPLACE=%s" % CMAKE_CXX_OUTPUT_EXTENSION_REPLACE
    cmd += " -DCMAKE_C_COMPILER=%s " % CMAKE_C_COMPILER
    cmd += " -DCMAKE_C_FLAGS=\"%s\"" % CMAKE_C_FLAGS
    cmd += " -DCMAKE_EXE_LINKER_FLAGS=%s" % CMAKE_EXE_LINKER_FLAGS
    cmd += " -DPYTHON=%s " % PYTHON
    cmd += " -DUSE_PYTHON2=%s " % USE_PYTHON2
    cmd += " -DBUILD_TESTING=%s" % BUILD_TESTING
    cmd += " -DOPENEXR_BUILD_UTILS=%s" % OPENEXR_BUILD_UTILS
    cmd += " -DOPENEXR_INSTALL_EXAMPLES=%s" % OPENEXR_INSTALL_EXAMPLES
    cmd += " -DOPENEXR_RUN_FUZZ_TESTS=%s" % OPENEXR_RUN_FUZZ_TESTS

    print(cmd)
    os.system (cmd)

elif cmd == "clobber":

    cmd = "rm -rf %s" % build
    print(cmd)
    os.system (cmd)

elif cmd == "coverage":

    coverage()
    
elif len(args) > 0:

    cmd = " ".join(args)

    print(cmd)
    os.system (cmd)
        
