#!/usr/bin/env python

import sys
import os
from os import path

lucas_ilm = "/lucas/ilm"
ilm_prefix = "/dept/rnd/home/cary/"
ilm_prefix = "/dept/rnd/home/cary/"
ilm_build = "/dept/rnd/builds/cary"

home_prefix = "/home/cary/"
home_build = "/home/cary/builds"

users_prefix = "/Users/cary/"
users_build = "/Users/cary/builds"

PYILMBASE_ENABLE = 0
OPENEXR_VIEWERS_ENABLE = 0
BUILD_TESTING = 1
OPENEXR_RUN_FUZZ_TESTS = 1

CXX_FLAGS = ""
C_FLAGS = ""

sanitize = None

CMAKE_VERBOSE_MAKEFILE = 1
CMAKE_BUILD_TYPE = "debug"
CMAKE_BUILD_TYPE = "release"

def branch():
    on_branch = "On branch "
    head_detached_at = "HEAD detached at "
    f = os.popen ("git status")
    lines = f.readlines()
    if len(lines) == 0:
        return "."
    b = lines[0][:-1]
    if b.startswith (on_branch):
        b = b[len (on_branch):]
    elif b.startswith (head_detached_at):
        b = b[len (head_detached_at):]
    else:
        b = "."
    return b

def run_cmake():
    args = " ".join (sys.argv[2:])
    cmd = "cmake %s %s" % (SRC_DIR, args)
    cmd += " -DCMAKE_INSTALL_PREFIX=%s/install" % build
    cmd += " -DCMAKE_SYSTEM_PREFIX=%s " % build
    cmd += " -DCMAKE_CXX_COMPILER=%s " % CXX
    cmd += " -DCMAKE_C_COMPILER=%s " % C
    cmd += " -DCMAKE_CXX_FLAGS=\"%s\"" % CXX_FLAGS
    cmd += " -DCMAKE_C_FLAGS=\"%s\"" % C_FLAGS
    cmd += " -DPYILMBASE_ENABLE=%s " % PYILMBASE_ENABLE
    cmd += " -DOPENEXR_VIEWERS_ENABLE=%s" % OPENEXR_VIEWERS_ENABLE
    cmd += " -DBUILD_TESTING=%s" % BUILD_TESTING
    cmd += " -DOPENEXR_RUN_FUZZ_TESTS=%s" % OPENEXR_RUN_FUZZ_TESTS
    cmd += " -DCMAKE_VERBOSE_MAKEFILE=%s" % CMAKE_VERBOSE_MAKEFILE
    cmd += " -DCMAKE_BUILD_TYPE=%s" % CMAKE_BUILD_TYPE
    
    print cmd
    os.system (cmd)

SRC_DIR = os.getcwd()

if SRC_DIR.startswith (lucas_ilm):
    SRC_DIR = SRC_DIR[len(lucas_ilm):]

if SRC_DIR.startswith (ilm_prefix):

    project = SRC_DIR[len(ilm_prefix):]
    build = "%s/%s/%s" % (ilm_build, project, branch())
    if not path.exists (build):
        os.makedirs (build)

    CXX = "/opt/rh/devtoolset-6/root/bin/g++"
    C = "/opt/rh/devtoolset-6/root/bin/gcc"

elif SRC_DIR.startswith (home_prefix):

    project = SRC_DIR[len(home_prefix):]
    build = "%s/%s/%s" % (home_build, project, branch())
    if not path.exists (build):
        os.makedirs (build)

    CXX = "g++"
    C = "gcc"

    CXX = "clang++"
    C = "clang"

    CXX_FLAGS += " -std=c++14"
    
elif SRC_DIR.startswith (users_prefix):

    project = SRC_DIR[len(users_prefix):]
    build = "%s/%s/%s" % (users_build, project, branch())
    if not path.exists (build):
        os.makedirs (build)

    CXX = "g++"
    C = "gcc"

print build
os.chdir (build)

if len (sys.argv) == 1:
    exit(0)
    
if sys.argv[1] == "cmake":

    run_cmake()

elif sys.argv[1] == "sanitize":

    sanitize = "undefined,address"
    sanitize = "address"
    sanitize = "undefined"
    CXX_FLAGS += " -fsanitize=%s " % sanitize
    C_FLAGS += " -fsanitize=%s " % sanitize

    run_cmake()

elif sys.argv[1] == "clobber":

    cmd = "rm -rf %s" % build
    print cmd
    os.system (cmd)
    
else:

    cmd = " ".join(sys.argv[1:])
    print cmd
    os.system (cmd)
        
