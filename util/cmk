#!/usr/bin/env python3

# cmk cmake clobber debug python sanitize -examples -tools -testing 

# cmk cmake -DImath_DIR=/home/cary/builds/src/cary-ilm/Imath/interop-fix2-Release/install/lib/cmake/Imath

import sys
import subprocess
import os
import glob

CMAKE_VERSION = "3.11.4"
CMAKE_VERSION = "3.10.3"

cmake_bin = "/home/cary/src/cmake/%s/bin/cmake" % CMAKE_VERSION
cmake_bin = "/usr/bin/cmake"
cmake_bin = "/home/cary/anaconda3/bin/cmake"

lucas_ilm = "/lucas/ilm"
ilm_prefix = "/dept/rnd/home/cary/"
ilm_prefix = "/dept/rnd/home/cary/"
ilm_build = "/dept/rnd/builds/cary"

home_prefix = "/home/cary/"
home_build = "/home/cary/builds"

users_prefix = "/Users/cary/"
users_build = "/Users/cary/builds"

PYTHON = 0
PIP = 0
USE_PYTHON2 = 0
BUILD_TESTING = 1
BUILD_SHARED_LIBS = 1
BUILD_THREADING = 1
BUILD_DOCS = 0
BUILD_WEBSITE = 0
OPENEXR_BUILD_UTILS = 1
OPENEXR_BUILD_TOOLS = 1
OPENEXR_INSTALL_EXAMPLES = 1
OPENEXR_RUN_FUZZ_TESTS = 0
CMAKE_VERBOSE_MAKEFILE = 1
CMAKE_BUILD_TYPE = "Release"

CMAKE_PREFIX_PATH = None
#CMAKE_PREFIX_PATH = "/home/cary/builds/releases/openexr-3.2.0-Release/install/lib/cmake"
#CMAKE_PREFIX_PATH = "/home/cary/builds/src/cary-ilm/Imath/fix_export_setting-Release/install"
#CMAKE_PREFIX_PATH = "/home/cary/builds/src/cary-ilm/Imath/main-Release/install"
#CMAKE_PREFIX_PATH = "/home/cary/builds/src/cary-ilm/Imath/main-Release/install:/home/cary/builds/src/ebiggers/libdeflate/master-Release/install/lib"
#CMAKE_PREFIX_PATH = "/home/cary/builds/src/ebiggers/libdeflate/master-Release/install/lib"

CMAKE_CXX_COMPILER = "g++-12"
CMAKE_CXX_COMPILER = "g++-11"
CMAKE_CXX_FLAGS = "-g -Wall"
#CMAKE_CXX_FLAGS = "-g "
CMAKE_CXX_STANDARD = 17
CMAKE_CXX_OUTPUT_EXTENSION_REPLACE = 0
CMAKE_C_OUTPUT_EXTENSION_REPLACE = 0
CMAKE_EXE_LINKER_FLAGS = ""
CMAKE_C_COMPILER = "gcc-12"
CMAKE_C_COMPILER = "gcc-11"
CMAKE_C_FLAGS = ""
CMAKE_TOOLCHAIN_FILE=None
OPENEXR_FORCE_INTERNAL_DEFLATE=None
OPENEXR_IMAGES_REPO="file:///home/cary/src/AcademySoftwareFoundation/openexr-images"
#OPENEXR_IMAGES_REPO="file:///home/cary/src/AcademySoftwareFoundation/openexr-images.git"
OPENEXR_IMAGES_TAG="v1.0"
OPENEXR_IMAGES_TAG=""

GCOV = "gcov-11"

def branch():
    on_branch = "On branch "
    head_detached_at = "HEAD detached at "
    f = subprocess.Popen (["git", "status"], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
    lines = f.stdout.readlines()
    if len(lines) == 0:
        return ""
    l = lines[0].decode("UTF-8")
    b = l[:-1]
    if b.startswith (on_branch):
        b = b[len (on_branch):]
    elif b.startswith (head_detached_at):
        b = b[len (head_detached_at):]
    else:
        b = ""
    return "/" + b

def coverage():

# gcov -l -p -o ../_build/src/ImathTest/CMakeFiles/ImathTest.dir ../src/ImathTest/testFunction.cpp


    files = glob.glob ("%s/**/*.gcno" % build, recursive=True)
    for f in files:
        dirname = os.path.dirname (f)
        s = f.split('/')

        cpp = '/' + s[1]
        for w in s[2:-1]:
            if w == "CMakeFiles" or w.endswith(".dir"):
                continue
            cpp += '/' + w
        cpp += '/' + s[-1].rsplit('.')[0] + ".cpp"
        cmd = "gcov -l -p -o %s %s\n" % (os.path.dirname(f), cpp)
        print (cmd)
        os.system(cmd)

        
# The sed command below converts from:
#   ../_build/src/OpenEXR/CMakeFiles/OpenColorIO.dir/ops/Exponent.gcno
# to:
#   ../src/OpenEXR/ops/Exponent.cpp
#
#for g in $(find ../_build -name "*.gcno" -type f); do
#    gcov -l -p -o $(dirname "$g") $(echo "$g" | sed -e 's/\/_build\//\//' -e 's/\.gcno/\.cpp/' -e 's/\/CMakeFiles.*\.dir\//\//')
#done
    

args = []
cmd = None

for arg in sys.argv[1:]:
    if arg == "build":
        cmd = arg
    elif arg == "cmake":
        cmd = arg
    elif arg == "ctest":
        cmd = arg
    elif arg == "LastTest.log" or arg == "testlog":
        cmd = "LastTest.log"
    elif arg == "clobber":
        cmd = arg
    elif arg == "debug":
        CMAKE_BUILD_TYPE = "Debug"
        CMAKE_CXX_FLAGS = "-ggdb3 -Og"
        CMAKE_C_FLAGS = "-ggdb3 -Og"
    elif arg == "release":
        CMAKE_BUILD_TYPE = "Release"
    elif arg == "python":
        PYTHON = 1
    elif arg == "pip":
        PIP = 1
    elif arg == "python2":
        PYTHON = 1
        USE_PYTHON2 = 1
    elif arg == "sanitize":
        sanitize = "address"
        sanitize = "undefined"
        sanitize = "undefined,address"
        CMAKE_CXX_FLAGS += " -fsanitize=%s " % sanitize
        CMAKE_C_FLAGS += " -fsanitize=%s " % sanitize
    elif arg == "-shared" or arg == "static":
        BUILD_SHARED_LIBS = 0
    elif arg == "-thread" or arg == "thread":
        BUILD_THREADING = 0
    elif arg == "-examples":
        OPENEXR_INSTALL_EXAMPLES = 0
    elif arg == "-tools" or arg == "-utils":
        OPENEXR_BUILD_TOOLS = 0
        OPENEXR_BUILD_UTILS = 0
    elif arg == "-test" or arg == "-testing":
        BUILD_TESTING = 0
    elif arg == "deflate":
        OPENEXR_FORCE_INTERNAL_DEFLATE = True
    elif arg == "aarch64":
        CMAKE_TOOLCHAIN_FILE = "cross-compilation-aarch64.cmake"
        CMAKE_C_COMPILER = "aarch64-linux-gnu-gcc"
        CMAKE_CXX_COMPILER = "aarch64-linux-gnu-g++"
    elif arg == "mingw":
        CMAKE_TOOLCHAIN_FILE = "cross-compilation-mingw.cmake"
#        CMAKE_TOOLCHAIN_FILE = "cmake/Toolchain-mingw.cmake"
        CMAKE_C_COMPILER = "x86_64-w64-mingw32-gcc-posix"
        CMAKE_CXX_COMPILER = "x86_64-w64-mingw32-g++-posix"
    elif arg == "11":
        CMAKE_CXX_STANDARD = 11
    elif arg == "clang":
        CMAKE_CXX_COMPILER = "clang++"
        CMAKE_C_COMPILER = "clang"
    elif arg == "gcov":
        CMAKE_CXX_FLAGS += " -g -O0 -fprofile-arcs -ftest-coverage"
        CMAKE_CXX_OUTPUT_EXTENSION_REPLACE = 1
        CMAKE_C_FLAGS += " -g -O0 -fprofile-arcs -ftest-coverage"
        CMAKE_C_OUTPUT_EXTENSION_REPLACE = 1
        CMAKE_EXE_LINKER_FLAGS = "-lgcov"
    elif arg == "f16c":
        CMAKE_CXX_FLAGS += " -mf16c"
        CMAKE_C_FLAGS += " -mf16c"
    elif arg == "table":
        CMAKE_CXX_FLAGS += " -DIMATH_HALF_NO_LOOKUP_TABLE=1"        
        CMAKE_C_FLAGS += " -DIMATH_HALF_NO_LOOKUP_TABLE=1"        
    elif arg == "docs" or arg == "website":
        BUILD_DOCS = 1
        BUILD_WEBSITE = 1
        if sys.argv[1] == "make":
            args.append ("website")
    elif arg == "coverage":
        cmd = arg
    elif arg == "validate":
        cmd = arg
    else:
        args.append (arg)
        
SRC_DIR = os.getcwd()

if SRC_DIR.startswith (lucas_ilm):

    SRC_DIR = SRC_DIR[len(lucas_ilm):]

if SRC_DIR.startswith (ilm_prefix):

    project = SRC_DIR[len(ilm_prefix):]
    build = "%s/%s%s" % (ilm_build, project, branch())
    if BUILD_SHARED_LIBS == 0:
        build += "-static"
    if not os.path.exists (build):
        os.makedirs (build)

    CMAKE_CXX_COMPILER = "/opt/rh/devtoolset-6/root/bin/g++"
    CMAKE_C_COMPILER = "/opt/rh/devtoolset-6/root/bin/gcc"

elif SRC_DIR.startswith (home_prefix):

    project = SRC_DIR[len(home_prefix):]
    build = "%s/%s%s-%s" % (home_build, project, branch(), CMAKE_BUILD_TYPE)
    if BUILD_SHARED_LIBS == 0:
        build += "-static"
    if not os.path.exists (build):
        os.makedirs (build)

elif SRC_DIR.startswith (users_prefix):

    project = SRC_DIR[len(users_prefix):]
    build = "%s/%s%s-%s" % (users_build, project, branch(), CMAKE_BUILD_TYPE)
    if BUILD_SHARED_LIBS == 0:
        build += "-static"
    if not os.path.exists (build):
        os.makedirs (build)

    cmake_bin = "cmake"
#    CMAKE_CXX_COMPILER = "g++"
#    CMAKE_C_COMPILER = "gcc"

else:

    print("where are you?")

print(build)
os.chdir (build)

if len (sys.argv) == 1:
    exit(0)
    
if CMAKE_TOOLCHAIN_FILE:
    if "aarch64" in CMAKE_TOOLCHAIN_FILE:
        with open(CMAKE_TOOLCHAIN_FILE, "w") as f: 
            f.write("set(CMAKE_SYSTEM_NAME Linux)\n")
            f.write("set(CMAKE_SYSTEM_PROCESSOR aarch64)\n")
            f.write("set(CMAKE_CROSSCOMPILING TRUE)\n")
    elif "mingw" in CMAKE_TOOLCHAIN_FILE:
        with open(CMAKE_TOOLCHAIN_FILE, "w") as f: 
            f.write("set(CMAKE_SYSTEM_NAME Windows)\n")
            f.write("set(TOOLCHAIN_PREFIX x86_64-w64-mingw32)\n")
            f.write("set(CMAKE_CROSSCOMPILING TRUE)\n")
            f.write("set(CMAKE_C_COMPILER ${TOOLCHAIN_PREFIX}-gcc-posix)\n")
            f.write("set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PREFIX}-g++-posix)\n")
            
if cmd == "cmake":

    args = " ".join (args)
    cmd = "%s %s %s" % (cmake_bin, SRC_DIR, args)
    if CMAKE_PREFIX_PATH:
        cmd += " -DCMAKE_PREFIX_PATH=%s" % CMAKE_PREFIX_PATH
    cmd += " -DCMAKE_BUILD_TYPE=%s" % CMAKE_BUILD_TYPE
    cmd += " -DCMAKE_INSTALL_PREFIX=%s/install" % build
    cmd += " -DBUILD_SHARED_LIBS=%s" % BUILD_SHARED_LIBS
    cmd += " -DOPENEXR_ENABLE_THREADING=%s" % BUILD_THREADING
    cmd += " -DCMAKE_VERBOSE_MAKEFILE=%s" % CMAKE_VERBOSE_MAKEFILE
    cmd += " -DCMAKE_CXX_STANDARD=%s " % CMAKE_CXX_STANDARD
    cmd += " -DCMAKE_CXX_COMPILER=%s " % CMAKE_CXX_COMPILER
    cmd += " -DCMAKE_CXX_FLAGS=\"%s\"" % CMAKE_CXX_FLAGS
    cmd += " -DCMAKE_CXX_OUTPUT_EXTENSION_REPLACE=%s" % CMAKE_CXX_OUTPUT_EXTENSION_REPLACE
    cmd += " -DCMAKE_C_COMPILER=%s " % CMAKE_C_COMPILER
    cmd += " -DCMAKE_C_FLAGS=\"%s\"" % CMAKE_C_FLAGS
    cmd += " -DCMAKE_C_OUTPUT_EXTENSION_REPLACE=%s" % CMAKE_C_OUTPUT_EXTENSION_REPLACE
    cmd += " -DCMAKE_EXE_LINKER_FLAGS=%s" % CMAKE_EXE_LINKER_FLAGS
    if CMAKE_TOOLCHAIN_FILE:
        cmd += "  -DCMAKE_TOOLCHAIN_FILE=%s" % CMAKE_TOOLCHAIN_FILE
        cmd += "  -DOPENEXR_FORCE_INTERNAL_DEFLATE='ON'"
    if OPENEXR_FORCE_INTERNAL_DEFLATE:
        cmd += "  -DOPENEXR_FORCE_INTERNAL_DEFLATE='ON'"
    cmd += " -DPYTHON=%s " % PYTHON
    cmd += " -DUSE_PYTHON2=%s " % USE_PYTHON2
    cmd += " -DBUILD_DOCS=%s " % BUILD_DOCS
    cmd += " -DBUILD_WEBSITE=%s " % BUILD_WEBSITE
    cmd += " -DBUILD_TESTING=%s" % BUILD_TESTING
    cmd += " -DOPENEXR_BUILD_PYTHON=%s" % PIP
    cmd += " -DOPENEXR_BUILD_TOOLS=%s" % OPENEXR_BUILD_TOOLS
    cmd += " -DOPENEXR_INSTALL_EXAMPLES=%s" % OPENEXR_INSTALL_EXAMPLES
    cmd += " -DOPENEXR_RUN_FUZZ_TESTS=%s" % OPENEXR_RUN_FUZZ_TESTS
    if OPENEXR_IMAGES_REPO:
        cmd += " -DOPENEXR_IMAGES_REPO=%s" % OPENEXR_IMAGES_REPO
        cmd += " -DOPENEXR_IMAGES_TAG=%s" % OPENEXR_IMAGES_TAG
    if OPENEXR_IMAGES_TAG:
        cmd += " -DOPENEXR_IMAGES_TAG=%s" % OPENEXR_IMAGES_TAG

    print(cmd)
    os.system (cmd)

elif cmd == "clobber":

    cmd = "rm -rf %s" % build
    print(cmd)
    os.system (cmd)

elif cmd == "ctest":

    cmd = f"ctest {' '.join(args)}"
    print(cmd)
    os.system(cmd)
    print("\n")

    cmd = f"cat {build}/Testing/Temporary/LastTest.log"
    print(cmd)
    os.system(cmd)
    
elif cmd == "LastTest.log":
    
    os.system(f"cat {build}/Testing/Temporary/LastTest.log")

elif cmd == "coverage":

    coverage()
    
elif cmd == "validate":

    os.chdir (SRC_DIR)

    if SRC_DIR.find ("Imath") > 0:
        os.system ("validate_imath_libs.sh %s/install ." % build)
    elif SRC_DIR.find ("openexr") > 0:
        os.system ("validate_openexr_libs.sh %s/install ." % build)
    else:
        print ("No validate.")
    
elif len(args) > 0:

    cmd = " ".join(args)

    print(f"os.system({cmd})")
    os.system (cmd)
        
